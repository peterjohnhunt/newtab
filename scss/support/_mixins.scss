//░░░░░░░░░░░░░░░░░░░░░░░░
//
//   DIRECTORY
//
//	 ✔_BestPractice
//
//	 _Text
//	     ∟Highlight
//	     ∟Placeholder
//	     ∟Ellipsis
//	     ∟Columns
//       ∟NoMargin
//
//	 _Alignment
//	     ∟Grid
//	     ∟NavList
//	     ∟Position
//	     ∟VerticalAlign
//	     ∟CenterByHeights
//	     ∟AbsoluteCenter
//
//	 _Size
//	     ∟AspectRatio
//	     ∟Overlay
//
//   _Background
//	     ∟Color
//	     ∟Size
//	     ∟Image
//	     ∟Behind
//
//	 _Transitions
//       ∟Ease
//       ∟Bezier
//
//	 _Manipulate
//	     ∟Transform
//	     ∟Keyframes
//	     ∟Animation
//
//	 _Features
//       ∟NavToggle
//
//	 _Photoshop
//	     ∟Grayscale
//	     ∟Multiply
//	     ∟Gradient
//	     ∟Blur
//
//	 _Shape
//	     ∟Square
//	     ∟Circle
//	     ∟Triangle
//
//	 _CrossBrowser
//	     ∟Prefixes
//
//░░░░░░░░░░░░░░░░░░░░░░░░

//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Text
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Highlight
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin highlight($bgColor, $color){
	::selection {
		background-color: $bgColor;
		color: $color;
	}

	::-moz-selection {
		background-color: $bgColor;
		color: $color;
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Placeholder
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin placeholder($color, $font:undefined){
	&::-webkit-input-placeholder { /* WebKit browsers */
		color: $color;
		@if( $font != undefined ){
			@extend %#{$font};
		}
	}

	&:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
		color: $color;
		opacity: 1;
		@if( $font != undefined ){
			@extend %#{$font};
		}
	}

	&::-moz-placeholder { /* Mozilla Firefox 19+ */
		color: $color;
		opacity: 1;
		@if( $font != undefined ){
			@extend %#{$font};
		}
	}

	&:-ms-input-placeholder { /* Internet Explorer 10+ */
		color: $color;
		@if( $font != undefined ){
			@extend %#{$font};
		}
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Ellipsis
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin ellipsis($overflow:ellipsis){
	overflow: hidden;
	white-space: nowrap;
	text-overflow: $overflow;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Columns
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin columnLayout($colCount, $colGap){
	column-count: $colCount;
	-moz-column-count: $colCount;
	-webkit-column-count: $colCount;
	column-gap: em($colGap);
	-moz-column-gap: em($colGap);
	-webkit-column-gap: em($colGap);
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟NoMargin
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin noMargin($position:last, $direction:bottom){
	&:#{$position}-child{
		margin-#{$direction}: 0;
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Alignment
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Grid
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// ════ⓤⓢⓔ════
// @include grid(4, 0, 0, (break:#, break:#));

@function calcWidth($col, $gut){
	$perc: (100% / $col);

	@if( $gut == 0 ){
		@return $perc;
	}
	@else{
		$gutter: ( ( $gut * ($col - 1) ) / $col );
		@return calc(#{$perc} - #{$gutter});
	}
}

@mixin grid($columns, $gutter-x, $gutter-y, $breakpoints:undefined){
	width: calcWidth($columns,$gutter-x);
	margin-right: $gutter-x;
	margin-top: $gutter-y;
	float: left;
	-webkit-transition: all 0.35s ease-in-out;
	-moz-transition: all 0.35s ease-in-out;
	-o-transition: all 0.35s ease-in-out;
	transition: all 0.35s ease-in-out;

	&:nth-child(#{$columns}n){
		margin-right: 0;
	}

	&:nth-child(#{$columns}n+1){
		clear: both;
	}

	&:nth-child(-n+#{$columns}){
		margin-top: 0;
	}

	@if( $breakpoints != undefined ){
		$breaks: $breakpoints;

		@each $breakpoint, $columns in $breaks{
			@media (max-width:#{$breakpoint}px){
				width: calcWidth($columns, $gutter-x);

				&:nth-child(n){
					margin-right: $gutter-x;
					margin-top: $gutter-y;
					clear: none;
				}

				&:nth-child(#{$columns}n){
					margin-right: 0;
				}

				&:nth-child(#{$columns}n+1){
					clear: both;
				}

				&:nth-child(-n+#{$columns}){
					margin-top: 0;
				}
			}
		}
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟NavList
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin navList($margin:null, $orientation:horizontal){
	list-style: none;

	li{
		@if $orientation != vertical{
			display: inline-block;
		}
		@if $margin != null{
			$direction:if( $orientation == vertical, bottom, right );

			&:not(:last-child){
				margin-#{$direction}: $margin;
			}
		}
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Position
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin position($directions){
	@each $direction, $value in $directions{
		#{$direction}: $value;
	}
}

@mixin absolute($directions){
	@include position($directions);
	position: absolute;
}

@mixin relative($directions){
	@include position($directions);
	position: relative;
}

@mixin fixed($directions){
	@include position($directions);
	position: fixed;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟VerticalAlign
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin vertAlign($child, $alignment:middle){
	&:before{
		content: '';
		display: inline-block;
		vertical-align: $alignment;
		height: 100%;
		width: .1px;
	}
	> #{$child}{
		display: inline-block;
		vertical-align: $alignment;
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟CenterByHeights
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin centerByHeights($parentHeight, $objectHeight, $position:relative){
	position: $position;
	top: ( $parentHeight - $objectHeight )/2;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟AbsoluteCenter
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin center($from:top, $amount:50%, $sides:undefined){
	$translation:null;

	@if $from == top{
		$translation:translateY(-50%);
	}
	@else if $from == bottom{
		$translation:translateY(50%);
	}
	@else if $from == left{
		$translation:translateX(-50%);
	}
	@else if $from == right{
		$translation:translateX(50%);
	}
	@else if $from == both{
		$translation:translate(-50%,-50%);
	}

	transform: $translation;
	-webkit-transform: $translation;
	-moz-transform: $translation;
	-o-transform: $translation;
	-ms-transform: $translation;
	position: absolute;

	@if $from == both{
		top: 50%;
		left: 50%;
	}
	@else{
		#{$from}: $amount;
	}

	@if( $sides != undefined ){
		$thesides:$sides;

		@each $side, $value in $thesides{
			#{$side}: $value;
		}
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Size
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟AspectRatio
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin aspectRatio($assetHeight, $assetWidth, $elementWidth:100){
	width: $elementWidth * 1%;
	height: 0;
	padding-top: ( $assetHeight / $assetWidth ) * ( $elementWidth * 1% );
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Overlay
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin overlay($height:100%, $width:100%, $position:(top:0, left:0)){
	height: $height;
	width: $width;
	position: absolute;

	@if( $position != undefined ){
		@include position($position);
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Background
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Color
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin bg($color){
	background-color: $color;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Size
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin bgSize($size:cover, $xAxis:50%, $yAxis:50%){
  -webkit-background-size: $size;
  -moz-background-size: $size;
  background-size: $size;
  background-position: $xAxis $yAxis;
  background-repeat: no-repeat;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Image
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// ════ⓤⓢⓔ════
// @include bgimg('icons/arrow.png')

@mixin bgImg($path, $folder-path:'../images/'){
	background-image: url(#{$folder-path}#{$path});
	background-repeat: no-repeat;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Behind
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin bgBehind($element, $zIndex:0){
	z-index: $zIndex;

	#{$element}{
		display: block;
		z-index: -1;
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Transitions
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Ease
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin ease($property:all, $duration:0.35s){
  -webkit-transition: $property $duration ease-in-out;
  -moz-transition: $property $duration ease-in-out;
  -o-transition: $property $duration ease-in-out;
  transition: $property $duration ease-in-out;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Bezier
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin bezier($property:all, $duration:0.35s, $behaviorValues:'0.155, 0.485, 0.325, 1.265'){
	-webkit-transition: $property $duration cubic-bezier(#{$behaviorValues});
	-moz-transition: $property $duration cubic-bezier(#{$behaviorValues});
	-o-transition: $property $duration cubic-bezier(#{$behaviorValues});
	transition: $property $duration cubic-bezier(#{$behaviorValues});
	-webkit-transition-timing-function: cubic-bezier(#{$behaviorValues});
	-moz-transition-timing-function: cubic-bezier(#{$behaviorValues});
	-o-transition-timing-function: cubic-bezier(#{$behaviorValues});
	transition-timing-function: cubic-bezier(#{$behaviorValues});
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Manipulate
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Transform
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin transform($value){
	transform: $value;
	-webkit-transform: $value;
	-moz-transform: $value;
	-o-transform: $value;
	-ms-transform: $value;
}

@mixin origin($xAxis:50%, $yAxis:50%){
	transform-origin: $xAxis $yAxis;
	-webkit-transform-origin: $xAxis $yAxis;
	-moz-transform-origin: $xAxis $yAxis;
	-o-transform-origin: $xAxis $yAxis;
	-ms-transform-origin: $xAxis $yAxis;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Keyframes
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-ms-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Animation
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin animation($animation, $delay, $duration, $count:1) {
	-webkit-animation-delay: $delay;
	-webkit-animation-duration: $duration;
	-webkit-animation-name: $animation;
	-webkit-animation-fill-mode: forwards;
	-webkit-animation-iteration-count:$count;
	-webkit-animation-timing-function: ease;

	-moz-animation-delay: $delay;
	-moz-animation-duration: $duration;
	-moz-animation-name: $animation;
	-moz-animation-fill-mode: forwards;
	-moz-animation-iteration-count:$count;
	-moz-animation-timing-function: ease;

	-o-animation-delay: $delay;
	-o-animation-duration: $duration;
	-o-animation-name: $animation;
	-o-animation-fill-mode: forwards;
	-o-animation-iteration-count:$count;
	-o-animation-timing-function: ease;

	animation-delay: $delay;
	animation-duration: $duration;
	animation-name: $animation;
	animation-fill-mode: forwards;
	animation-iteration-count:$count;
	animation-timing-function: ease;
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Features
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟NavToggle
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin toggle($height,$width,$thickness,$color,$speed:0.35s){
	height: $height;
	width: $width;
	position: relative;
	cursor: pointer;

	> .tog{
		height: $thickness;
		width: 100%;
		background-color: $color;
		position: absolute;

		&.top{
			top: 0;
		}
		&.mid{
			@include centerByHeights($height, $thickness, absolute);
		}
		&.bot{
			bottom: 0;
		}
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Photoshop
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Grayscale
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin grayscale{
	-moz-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
	-o-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
	-webkit-filter: grayscale(100%);
	filter: gray;
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Multiply
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin multiply($color, $opacity){
	background-blend-mode: multiply;
	background-color: rgba($color, $opacity);
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Gradient
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin gradient($startColor, $endColor, $axis:x, $startPercent:0%, $endPercent:100%){
	@if $axis == y{
		background: $startColor; /* Old browsers */
		background: -moz-linear-gradient(top,  $startColor $startPercent, $endColor $endPercent); /* FF3.6+ */
		background: -webkit-gradient(linear, left top, left bottom, color-stop($startPercent,$startColor), color-stop($endPercent,$endColor)); /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(top,  $startColor $startPercent,$endColor $endPercent); /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(top,  $startColor $startPercent,$endColor $endPercent); /* Opera 11.10+ */
		background: -ms-linear-gradient(top,  $startColor $startPercent,$endColor $endPercent); /* IE10+ */
		background: linear-gradient(to bottom,  $startColor $startPercent,$endColor $endPercent); /* W3C */
	}
	@else if $axis == x{
		background: $startColor; /* Old browsers */
		background: -moz-linear-gradient(left,  $startColor $startPercent, $endColor $endPercent); /* FF3.6+ */
		background: -webkit-gradient(linear, left top, right top, color-stop($startPercent,$startColor), color-stop($endPercent,$endColor)); /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(left,  $startColor $startPercent,$endColor $endPercent); /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(left,  $startColor $startPercent,$endColor $endPercent); /* Opera 11.10+ */
		background: -ms-linear-gradient(left,  $startColor $startPercent,$endColor $endPercent); /* IE10+ */
		background: linear-gradient(to right,  $startColor $startPercent,$endColor $endPercent); /* W3C */
	}
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Blur
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin blur($amount){
	filter:blur(#{$amount}px);
	-webkit-filter:blur(#{$amount}px);
	-moz-filter:blur(#{$amount}px);
	-o-filter:blur(#{$amount}px);
	-ms-filter:blur(#{$amount}px);
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _Shapes
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Square
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin square($size){
	height: $size;
	width: $size;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Circle
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin circle($size){
	height: $size;
	width: $size;
	border-radius: 50%;
}

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Triangle
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foregroundColor: nth($color, 1);
  $backgroundColor: if( length($color) == 2, nth($color, 2), transparent );

  @if ( $direction == up ) or ( $direction == down ) or ( $direction == right ) or ( $direction == left ) {

	$width: $width / 2;
	$height: if(length($size) > 1, $height, $height/2);

	@if $direction == up {
	  border-bottom: $height solid $foregroundColor;
	  border-left: $width solid $backgroundColor;
	  border-right: $width solid $backgroundColor;

	} @else if $direction == right {
	  border-bottom: $width solid $backgroundColor;
	  border-left: $height solid $foregroundColor;
	  border-top: $width solid $backgroundColor;

	} @else if $direction == down {
	  border-left: $width solid $backgroundColor;
	  border-right: $width solid $backgroundColor;
	  border-top: $height solid $foregroundColor;

	} @else if $direction == left {
	  border-bottom: $width solid $backgroundColor;
	  border-right: $height solid $foregroundColor;
	  border-top: $width solid $backgroundColor;
	}
  }

  @else if ( $direction == up-right ) or ( $direction == up-left ) {
	border-top: $height solid $foregroundColor;

	@if $direction == up-right {
	  border-left:  $width solid $backgroundColor;

	} @else if $direction == up-left {
	  border-right: $width solid $backgroundColor;
	}
  }

  @else if ( $direction == down-right ) or ( $direction == down-left ) {
	border-bottom: $height solid $foregroundColor;

	@if $direction == down-right {
	  border-left:  $width solid $backgroundColor;

	} @else if $direction == down-left {
	  border-right: $width solid $backgroundColor;
	}
  }

  @else if ( $direction == inset-up ) {
	border-color: $backgroundColor $backgroundColor $foregroundColor;
	border-style: solid;
	border-width: $height $width;
  }

  @else if ( $direction == inset-down ) {
	border-color: $foregroundColor $backgroundColor $backgroundColor;
	border-style: solid;
	border-width: $height $width;
  }

  @else if ( $direction == inset-right ) {
	border-color: $backgroundColor $backgroundColor $backgroundColor $foregroundColor;
	border-style: solid;
	border-width: $width $height;
  }

  @else if ( $direction == inset-left ) {
	border-color: $backgroundColor $foregroundColor $backgroundColor $backgroundColor;
	border-style: solid;
	border-width: $width $height;
  }
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// _CrossBrowser
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ∟Prefixes
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


@mixin prefix($property, $value){
	@each $prefix in -webkit-, -ms-, -o-, -moz-, '' {
		#{$prefix}#{$property}: $value;
	}
}


//▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
//
//	✔_BestPractice
//
//
//	1. Case Style:
//
//  All mixin names and variables should be written
//	in the camel-case.
//
//	@example: @mixin uniqueName(newVariable)
//
//
//	2. Naming Convention:
//
//  Avoid undescriptive or abstract mixin or variable
//	names. Long variables are preferred over most
//	ambiguous, short variables.
//
//	@example: @mixin rows   >  @mixin rowMachine
//  @example: $orientation  >  $or
//
//	3. Spacing
//
//	Avoid spacing before default variable values, as
//	well as spaces between variable names and main
//	mixin parentheses.
//
//	@example: @mixin name($variable:value)
//
//	Add spacing around conditional statements within
//	the parentheses.
//
//	@example: @if( $variable == 0 )
//
//	Add spacing between variable lists.
//
//	@example: @mixin name($first:1, $second:2)
//
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄